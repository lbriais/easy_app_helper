require 'slop'

module EasyAppHelper::Base
  MODULE_PRIORITY = 10

  include EasyAppHelper::Common


  @app_config = {}

  # Gives access to the application config. This should be the only attribute you will
  # use once this module is fully configured.
  attr_reader :app_config
  # Gives access to the initial command line options. Just for information as already 
  # merged into the app_config.
  def app_cmd_line_options
    @slop_definition.nil? ? {} : @slop_definition.to_hash
  end

  def app_helper_init(script_filename,
                      app_name="Undefined application name",
                      app_description="No description available",
                      app_version="unknown")
    # A brand new config is created.
    @app_config = {}
    # Initialize default options, and creates @slop_definition.
    build_default_command_line_options script_filename, app_name, app_description, app_version
    # Process all actions on EasyAppHelper modules that change app_config or add command
    # line options.
    process_helper_modules_init_config_actions script_filename, app_name, app_description, app_version
    # Provides possibility to the script writer to add its own command line options
    add_script_specific_cmd_line_options
    # Parses command line options, and merges with the app_config
    merge_cmd_line_options_into_config
    # Performs modules entry points
    process_helper_modules_entry_points
  end



  # Returns the text of the inline help. Generated by Slop.
  def help
    @slop_definition.to_s
  end



  ################################################################################
  private 

  # Checks EasyAppHelper modules and perform some actions on them.
  # - Does it add some command line options? Then add them by calling add_cmd_line_options
  # - Does it modify app_config? Then call update_config. 
  def process_helper_modules_init_config_actions(script_filename, app_name, app_description, app_version)
    process_helper_modules do |mod|
      # Checks if th emodule adds some command line options
      mod.add_cmd_line_options @slop_definition if mod.respond_to? :add_cmd_line_options
      # Does the module changing the application config
      if mod.respond_to? :update_config
        module_config = mod.update_config(script_filename, app_name, app_description, app_version) 
        @app_config = override_config app_config, module_config
      end
    end
  end

  # Call each initialization entry point for modules if any.
  def process_helper_modules_entry_points
    process_helper_modules do |mod|
      if mod.respond_to? :module_entry_point
        if self.respond_to? mod.module_entry_point
          self.send(mod.module_entry_point)
        else
          raise "Wrong module entry point specified !"
        end
      end
    end
  end

  # Utility method to process EasyAppHelper modules in order of priority.
  def process_helper_modules
    self.class.included_modules
      .map {|mod| mod if mod.name =~ /^EasyAppHelper::/}
      .compact
      .sort {|a,b| a::MODULE_PRIORITY <=> b::MODULE_PRIORITY }
      .each {|mod| yield mod}
  end

  def merge_cmd_line_options_into_config
    @slop_definition.parse!
    @app_config = override_config app_config, @slop_definition.to_hash
  end

  # Builds common used command line options
  def build_default_command_line_options(script_filename, app_name, app_description, app_version)
    # Default options
    @slop_definition = Slop.new do
      banner "\nUsage: #{script_filename} [options]\n#{app_name} Version: #{app_version}\n\n#{app_description}"
      separator "-- Generic options -------------------------------------------"
      on :auto, 'Auto mode. Bypasses questions to user.', :argument => false
      on :simulate, 'Do not perform the actual underlying actions.', :argument => false
      on :v, :verbose, 'Enable verbose mode.', :argument => false
      on :h, :help, 'Displays this help.', :argument => false
    end
  end

  # Hook for the script to add its own command line options
  #
  # Just need to implement a add_specifc_command_line_options method that tal=ke a slop object as parameter
  def add_script_specific_cmd_line_options
    if self.respond_to? :add_specifc_command_line_options
      @slop_definition.separator "\n-- Script specific options------------------------------------"
      self.add_specifc_command_line_options @slop_definition
    end
  end



end
