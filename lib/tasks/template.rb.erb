#!/usr/bin/env ruby
# This file has been generated by easy_app_helper Gem on the <%= current_date %>
# See 'https://rubygems.org/gems/easy_app_helper'

require '<%= gem_name %>'
require 'easy_app_helper'

module <%= gem_module %>
    class <%= script_class %>

        # Inserted here, but you may probably have already defined this somewhere else...
        NAME = 'My script'
        DESCRIPTION = 'Description of my script'

        include EasyAppHelper

        def initialize
            <% unless executable_name == gem_name %>
            config.executable = '<%= executable_name %>'
            <% end %>
            config.describes_application app_name: NAME,
                                         app_version: <%= gem_module %>::VERSION,
                                         app_description: DESCRIPTION
            add_script_options
        end

        def run
            # logging startup configuration
            logger.debug "Config layers ->\n#{config.detailed_layers_info}"
            logger.debug "Merged config -> #{config[].to_yaml}"
            # Displaying (and exiting) command line help
            if config[:help]
                puts config.command_line_help
                exit 0
            end
            check_options
            logger.info 'Application is starting...'
            do_process
        rescue => e
            puts "Program aborted with message: '#{e.message}'."
            if config[:debug]
                logger.fatal "#{e.message}\nBacktrace:\n#{e.backtrace.join("\n\t")}"
            else
                puts '  Use --debug option for more detail (see --help).'
            end
        end

        private

        def add_script_options
          config.add_command_line_section do |slop|
            ## Insert here your extra command-line options
            ## Here under examples using potentially gem config layer to display default option value...
            # slop.on :p, :port, "Specify port to bind to. Default #{config.gem_layer[:port]}.", argument: true, as: Integer
            # slop.on :b, :bind, "Specify address to bind to. Default #{config.gem_layer[:bind]}.", argument: true, as: String
          end
        end

        def do_process
          # Your code here
        end

        def check_options
          # Your code here
        end

    end
end

<%= gem_module %>::<%= script_class %>.new.run