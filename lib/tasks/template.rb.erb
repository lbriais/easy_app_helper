#!/usr/bin/env ruby
# coding: utf-8
# This file has been generated by easy_app_helper Gem on the <%= current_date %>
# See 'https://rubygems.org/gems/easy_app_helper'

require 'rubygems'
require 'bundler/setup'

require 'easy_app_helper'
require 'easy_app_helper/scripts'
require '<%= gem_name %>'

module <%= gem_module %>
  class <%= script_class %> < EasyAppHelper::Scripts::Master

    # If you want to manage sub-commands a-la-git, include following
    # include EasyAppHelper::Scripts::SubCommandManager

    # Inserted here, but you may probably have already defined this somewhere else...
    NAME = '<%= executable_name.titleize %>'
    DESCRIPTION = 'Description of <%= executable_name %>'

    def initialize
      super(NAME, <%= gem_module %>::VERSION, DESCRIPTION<% unless executable_name == gem_name -%>, '<%= executable_name %>'<% end -%>)
    end

    # def add_script_options
    #   ## Create here your extra command-line options
    #   ## Here under are examples using potentially gem config layer to display default option value...
    #   ## Check Slop documentation for further info.
    #   # config.add_command_line_section do |slop|
    #     # slop.on :p, :port, "Specify port to bind to. Default #{config.executable_gem_layer[:port]}.", argument: true, as: Integer
    #     # slop.on :b, :bind, "Specify address to bind to. Default #{config.executable_gem_layer[:bind]}.", argument: true, as: String
    #   # end
    # end

    # def do_process
    #   # Your code here.
    # end

    # def check_config
    #   # Check the config and raise an exception if incorrect.
    # end

  end
end

<%= gem_module %>::<%= script_class %>.new.run
